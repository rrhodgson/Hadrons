/*
 * Gamma3ptNeutralDisc.hpp, part of Hadrons (https://github.com/aportelli/Hadrons)
 *
 * Copyright (C) 2015 - 2023
 *
 * Author: Antonin Portelli <antonin.portelli@me.com>
 * Author: Fionn O hOgain <fionn.o.hogain@ed.ac.uk>
 * Author: Lanny91 <andrew.lawson@gmail.com>
 * Author: Ryan Hill <rchrys.hill@gmail.com>
 * Author: Raoul Hodgson <raoul.hodgson@desy.de>
 *
 * Hadrons is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * Hadrons is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Hadrons.  If not, see <http://www.gnu.org/licenses/>.
 *
 * See the full license in the file "LICENSE" in the top level distribution 
 * directory.
 */

/*  END LEGAL */

#ifndef Hadrons_MContraction_Gamma3ptNeutralDisc_hpp_
#define Hadrons_MContraction_Gamma3ptNeutralDisc_hpp_

#include <Hadrons/Global.hpp>
#include <Hadrons/Module.hpp>
#include <Hadrons/ModuleFactory.hpp>
#include <Hadrons/Serialization.hpp>

BEGIN_HADRONS_NAMESPACE

/*
 * Weak Hamiltonian + current contractions, disconnected topology for neutral 
 * mesons.
 * 
 * These contractions are generated by operators Q_1,...,10 of the dS=1 Weak
 * Hamiltonian in the physical basis and an additional current J (see e.g. 
 * Fig 11 of arXiv:1507.03094).
 * 
 * Schematic:
 *                        
 *           q2                 q3
 *       /---<---\           /---<--\
 *      /         \         /        \
 *     /           \       /          \
 *  i *            * G    |            * f
 *     \           /       \          /
 *      \         /         \        /
 *       \--->---/           \------/
 *          q1 
 * options
 * - q1: input propagator 1 (string)
 * - q2: input propagator 2 (string)
 * - q3: input propagator 3 (string)
 * 
 * trace:   trace(q1*adj(q2)*g5*G)*trace(q3*g5)
 */

/******************************************************************************
 *                         Gamma3ptNeutralDisc                                   *
 ******************************************************************************/
BEGIN_MODULE_NAMESPACE(MContraction)

class Gamma3ptNeutralDiscPar: Serializable
{
public:
    GRID_SERIALIZABLE_CLASS_MEMBERS(Gamma3ptNeutralDiscPar,
                                    std::string, q1,
                                    std::string, q2,
                                    std::string, q3,
                                    int        , tf,
                                    std::string, gamma,
                                    std::string, output);
};

template <typename FImpl>
class TGamma3ptNeutralDisc: public Module<Gamma3ptNeutralDiscPar>
{
public:
    FERM_TYPE_ALIASES(FImpl,);
    class Metadata: Serializable
    {
    public:
        GRID_SERIALIZABLE_CLASS_MEMBERS(Metadata,
                                        Gamma::Algebra, gamma,
                                        Gamma::Algebra, op);
    };
    typedef Correlator<Metadata> Result;
public:
    /* constructor */ 
    TGamma3ptNeutralDisc(const std::string name);
    /* destructor */ 
    virtual ~TGamma3ptNeutralDisc(void) {};
    /* dependency relation */ 
    virtual std::vector<std::string> getInput(void);
    virtual std::vector<std::string> getOutput(void);
    virtual std::vector<std::string> getOutputFiles(void);
    virtual void parseGammaString(std::vector<Gamma::Algebra> &gammaList);
protected:
    /* setup */ 
    virtual void setup(void);
    /* execution */ 
    virtual void execute(void);
};

MODULE_REGISTER_TMP(Gamma3ptNeutralDisc, TGamma3ptNeutralDisc<FIMPL>, MContraction);

/*******************************************************************************
 *                  TGamma3ptNeutralDisc implementation                         *
 ******************************************************************************/
// constructor /////////////////////////////////////////////////////////////////
template <typename FImpl>
TGamma3ptNeutralDisc<FImpl>::TGamma3ptNeutralDisc(const std::string name)
: Module<Gamma3ptNeutralDiscPar>(name)
{}

// dependencies/products ///////////////////////////////////////////////////////
template <typename FImpl>
std::vector<std::string> TGamma3ptNeutralDisc<FImpl>::getInput(void)
{
    std::vector<std::string> in = {par().q1, par().q2, par().q3};
    
    return in;
}

template <typename FImpl>
std::vector<std::string> TGamma3ptNeutralDisc<FImpl>::getOutput(void)
{
    std::vector<std::string> out = {getName()};
    
    return out;
}

template <typename FImpl>
std::vector<std::string> TGamma3ptNeutralDisc<FImpl>::getOutputFiles(void)
{
    std::vector<std::string> output;
    
    if (!par().output.empty())
        output.push_back(resultFilename(par().output));
    
    return output;
}

// setup ///////////////////////////////////////////////////////////////////////
template <typename FImpl>
void TGamma3ptNeutralDisc<FImpl>::setup(void)
{
    envTmpLat(ComplexField, "corr");
    envCreate(HadronsSerializable, getName(), 1, 0);
}

template <typename FImpl>
void TGamma3ptNeutralDisc<FImpl>::parseGammaString(std::vector<Gamma::Algebra> &gammaList)
{
    gammaList.clear();
    // Determine gamma matrices to insert at source/sink.
    if (par().gamma.compare("all") == 0)
    {
        // Do all contractions.
        for (unsigned int i = 1; i < Gamma::nGamma; i += 2)
        {
            gammaList.push_back((Gamma::Algebra)i);
        }
    }
    else
    {
        // Parse individual contractions from input string.
        gammaList = strToVec<Gamma::Algebra>(par().gamma);
    } 
}

// execution ///////////////////////////////////////////////////////////////////
template <typename FImpl>
void TGamma3ptNeutralDisc<FImpl>::execute(void)
{
    LOG(Message) << "Computing neutral disconnected 3pt contractions '" 
                 << getName() << "' using quarks '" << par().q1 << "', '" 
                 << par().q2 << " and '" << par().q3 
                 << "'." << std::endl;

    std::vector<Result>   result;
    Result                r;
    auto                  &q1 = envGet(PropagatorField, par().q1);
    auto                  &q2 = envGet(PropagatorField, par().q2);
    auto                  &q3 = envGet(SlicedPropagator, par().q3);
    Gamma                 g5(Gamma::Algebra::Gamma5);
    std::vector<Gamma::Algebra> gammaList;
    parseGammaString(gammaList);

    envGetTmp(ComplexField, corr);
    for (auto &g: gammaList)
    {
        const Gamma& G = Gamma(g);

        SlicedComplex buf;

        r.info.gamma = G.g;
        corr = trace(q1*adj(q2)*g5*G)*trace(q3[par().tf]*g5);
        sliceSum(corr, buf, Tp);
        r.corr.clear();
        for (unsigned int t = 0; t < buf.size(); ++t)
        {
            r.corr.push_back(TensorRemove(buf[t]));
        }
        result.push_back(r);
    }
    // IO
    saveResult(par().output, "gamma3pt_disc0", result);
    auto &out = envGet(HadronsSerializable, getName());
    out = result;
}


END_MODULE_NAMESPACE

END_HADRONS_NAMESPACE

#endif // Hadrons_MContraction_Gamma3ptNeutralDisc_hpp_
